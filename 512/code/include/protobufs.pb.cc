// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs.proto

#include "protobufs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protobufs {
constexpr remoteAdd::remoteAdd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : para1_(int64_t{0})
  , para2_(int64_t{0}){}
struct remoteAddDefaultTypeInternal {
  constexpr remoteAddDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~remoteAddDefaultTypeInternal() {}
  union {
    remoteAdd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT remoteAddDefaultTypeInternal _remoteAdd_default_instance_;
constexpr remoteReturn::remoteReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ans_(int64_t{0}){}
struct remoteReturnDefaultTypeInternal {
  constexpr remoteReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~remoteReturnDefaultTypeInternal() {}
  union {
    remoteReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT remoteReturnDefaultTypeInternal _remoteReturn_default_instance_;
}  // namespace protobufs
namespace protobufs {

// ===================================================================

class remoteAdd::_Internal {
 public:
};

remoteAdd::remoteAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobufs.remoteAdd)
}
remoteAdd::remoteAdd(const remoteAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&para1_, &from.para1_,
    static_cast<size_t>(reinterpret_cast<char*>(&para2_) -
    reinterpret_cast<char*>(&para1_)) + sizeof(para2_));
  // @@protoc_insertion_point(copy_constructor:protobufs.remoteAdd)
}

void remoteAdd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&para1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&para2_) -
    reinterpret_cast<char*>(&para1_)) + sizeof(para2_));
}

remoteAdd::~remoteAdd() {
  // @@protoc_insertion_point(destructor:protobufs.remoteAdd)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void remoteAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void remoteAdd::ArenaDtor(void* object) {
  remoteAdd* _this = reinterpret_cast< remoteAdd* >(object);
  (void)_this;
}
void remoteAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void remoteAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void remoteAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:protobufs.remoteAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&para1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&para2_) -
      reinterpret_cast<char*>(&para1_)) + sizeof(para2_));
  _internal_metadata_.Clear<std::string>();
}

const char* remoteAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 para1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          para1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 para2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          para2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* remoteAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobufs.remoteAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 para1 = 1;
  if (this->para1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_para1(), target);
  }

  // int64 para2 = 2;
  if (this->para2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_para2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobufs.remoteAdd)
  return target;
}

size_t remoteAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobufs.remoteAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 para1 = 1;
  if (this->para1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_para1());
  }

  // int64 para2 = 2;
  if (this->para2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_para2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void remoteAdd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const remoteAdd*>(
      &from));
}

void remoteAdd::MergeFrom(const remoteAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobufs.remoteAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.para1() != 0) {
    _internal_set_para1(from._internal_para1());
  }
  if (from.para2() != 0) {
    _internal_set_para2(from._internal_para2());
  }
}

void remoteAdd::CopyFrom(const remoteAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobufs.remoteAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remoteAdd::IsInitialized() const {
  return true;
}

void remoteAdd::InternalSwap(remoteAdd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(remoteAdd, para2_)
      + sizeof(remoteAdd::para2_)
      - PROTOBUF_FIELD_OFFSET(remoteAdd, para1_)>(
          reinterpret_cast<char*>(&para1_),
          reinterpret_cast<char*>(&other->para1_));
}

std::string remoteAdd::GetTypeName() const {
  return "protobufs.remoteAdd";
}


// ===================================================================

class remoteReturn::_Internal {
 public:
};

remoteReturn::remoteReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobufs.remoteReturn)
}
remoteReturn::remoteReturn(const remoteReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ans_ = from.ans_;
  // @@protoc_insertion_point(copy_constructor:protobufs.remoteReturn)
}

void remoteReturn::SharedCtor() {
ans_ = int64_t{0};
}

remoteReturn::~remoteReturn() {
  // @@protoc_insertion_point(destructor:protobufs.remoteReturn)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void remoteReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void remoteReturn::ArenaDtor(void* object) {
  remoteReturn* _this = reinterpret_cast< remoteReturn* >(object);
  (void)_this;
}
void remoteReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void remoteReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void remoteReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:protobufs.remoteReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ans_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* remoteReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* remoteReturn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobufs.remoteReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ans = 1;
  if (this->ans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobufs.remoteReturn)
  return target;
}

size_t remoteReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobufs.remoteReturn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ans = 1;
  if (this->ans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ans());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void remoteReturn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const remoteReturn*>(
      &from));
}

void remoteReturn::MergeFrom(const remoteReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobufs.remoteReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ans() != 0) {
    _internal_set_ans(from._internal_ans());
  }
}

void remoteReturn::CopyFrom(const remoteReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobufs.remoteReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remoteReturn::IsInitialized() const {
  return true;
}

void remoteReturn::InternalSwap(remoteReturn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ans_, other->ans_);
}

std::string remoteReturn::GetTypeName() const {
  return "protobufs.remoteReturn";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobufs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobufs::remoteAdd* Arena::CreateMaybeMessage< ::protobufs::remoteAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobufs::remoteAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::protobufs::remoteReturn* Arena::CreateMaybeMessage< ::protobufs::remoteReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobufs::remoteReturn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
